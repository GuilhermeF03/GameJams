[gd_scene load_steps=3 format=3 uid="uid://d1debc3b82q1e"]

[ext_resource type="Texture2D" uid="uid://cxjgl8g1ejkyo" path="res://interactables/equip_icon.png" id="1_orbkq"]

[sub_resource type="GDScript" id="GDScript_m7sit"]
script/source = "extends Node2D

@onready var pick_placeholder = $TextureRect
@onready var label = $TextureRect/Label
@onready var player : Node2D = get_tree().get_first_node_in_group(\"Player\")

var interactAction =  InputMap.action_get_events(\"interact\")[0].as_text()[0]
var interactableQueue : Array[InteractArea]= []
var currInteractable : InteractArea
var canInteract = true
var onInteractionMode = false

func registerInteraction(interactable : InteractArea):
	interactableQueue.push_back(interactable)

	
func unregisterInteraction(interactable : InteractArea):
	var index = interactableQueue.find(interactable)
	if index != -1:
		interactableQueue.remove_at(index)

	
func startInteractionMode(interactable : InteractArea):
	onInteractionMode = true
	#InputManager.setLimit(InputManager.PlayerInputLimit.CONTROL_ONLY)
	currInteractable = interactable
	

func _physics_process(_delta: float) -> void:
	if onInteractionMode:
		currInteractable.handleInteraction()
		
		

func _process(_delta):
	if !onInteractionMode:	
		if interactableQueue.size() > 0 && canInteract:
			interactableQueue.sort_custom(_sortInteractables)
			pick_placeholder.show()
		else:
			pick_placeholder.hide()
	if pick_placeholder.visible:
		if interactableQueue.size() > 0 && canInteract:
			interactableQueue.sort_custom(_sortInteractables)
			
			var interactable = interactableQueue[0]
			label.text = \"[%s]\" % interactAction
			pick_placeholder.global_position = interactable.global_position
			pick_placeholder.z_index = 1000
			pick_placeholder.global_position.y -= 96
			pick_placeholder.global_position.x -= 30
			pick_placeholder.show()
		else:
			pick_placeholder.hide()
			


func _sortInteractables(objA : InteractArea, objB : InteractArea):
	var distA = abs(player.position - objA.global_position)
	var distB = abs(player.global_position - objB.global_position)
	if distA == distB:
		var priorityA = objA.priority
		var priorityB = objB.priority
		return priorityA > priorityB
	else: return distA < distB
	
		
func _input(event):
	if event.is_action_pressed(\"interact\"): # End interaction with Environment Interactable path
		# Call exit handler and ends the current interaction
		if onInteractionMode:
			onInteractionMode = false
			await currInteractable.exitInteraction()
			currInteractable = null
		else: # Normal path
			if canInteract && interactableQueue.size() > 0:
				canInteract = false	
				var interactable = interactableQueue[0]
				
				# Not toggle only - start interaction handling
				if !interactable.toggle_only:
					onInteractionMode = true
					currInteractable = interactable
					
				await interactable.interact()
				canInteract = true	
"

[node name="InteractionManager" type="Node2D"]
script = SubResource("GDScript_m7sit")

[node name="TextureRect" type="TextureRect" parent="."]
texture_filter = 1
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -32.0
offset_top = -32.0
offset_right = 56.0
offset_bottom = 56.0
grow_horizontal = 2
grow_vertical = 2
texture = ExtResource("1_orbkq")

[node name="Label" type="Label" parent="TextureRect"]
texture_filter = 1
layout_mode = 1
anchors_preset = -1
anchor_left = 0.5
anchor_top = 0.35
anchor_right = 0.5
anchor_bottom = 0.65
offset_left = -10.0
offset_top = -11.5
offset_right = 10.0
offset_bottom = 11.5
grow_horizontal = 2
grow_vertical = 2
text = "[E]"
horizontal_alignment = 1
vertical_alignment = 1
