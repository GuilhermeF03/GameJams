[gd_scene load_steps=20 format=3 uid="uid://d0mst4eki2yyd"]

[ext_resource type="Script" path="res://player/PlayerController.gd" id="1_3iq6n"]
[ext_resource type="Texture2D" uid="uid://b4g5kl5t1cfkk" path="res://player/player.png" id="1_34gvv"]
[ext_resource type="Script" path="res://addons/phantom_camera/scripts/phantom_camera/phantom_camera_2D.gd" id="2_ajiiy"]
[ext_resource type="PackedScene" uid="uid://dd1bjjaxa7dur" path="res://player/inventory/inventory.tscn" id="2_urbfw"]
[ext_resource type="PackedScene" uid="uid://ywpg5nkhidqk" path="res://player/WeaponHandler.tscn" id="7_cn85d"]

[sub_resource type="GDScript" id="GDScript_102o8"]
script/source = "@tool
@icon(\"res://addons/phantom_camera/icons/phantom_camera_host.svg\")
class_name PhantomCameraHost
extends Node

## Controls a scene's [Camera2D] (2D scenes) and [Camera3D] (3D scenes).
##
## All instantiated [param PhantomCameras] in a scene are assign to and managed by a
## PhantomCameraHost. It is what determines which [param PhantomCamera] should
## be active.

#region Constants

const _constants := preload(\"res://addons/phantom_camera/scripts/phantom_camera/phantom_camera_constants.gd\")

#endregion


#region Signals

## Updates the viewfinder [param dead zones] sizes.[br]
## [b]Note:[/b] This is only being used in the editor viewfinder UI.
signal update_editor_viewfinder

#endregion


#region Variables

## For 2D scenes, is the [Camera2D] instance the [param PhantomCameraHost] controls.
var camera_2d: Camera2D = null
## For 3D scenes, is the [Camera3D] instance the [param PhantomCameraHost] controls.
var camera_3d: Camera3D = null

var _pcam_list: Array[Node] = []

var _active_pcam: Node = null
var _active_pcam_priority: int = -1
var _active_pcam_missing: bool = true
var _active_pcam_has_damping: bool = false

var _prev_active_pcam_2d_transform: Transform2D = Transform2D()
var _prev_active_pcam_3d_transform: Transform3D = Transform3D()

var _trigger_pcam_tween: bool = false
var _tween_duration: float = false

var _multiple_pcam_hosts: bool = false

var _is_child_of_camera: bool = false
var _is_2D: bool = false


var _viewfinder_node: Control = null
var _viewfinder_needed_check: bool = true

var _camera_zoom: Vector2 = Vector2.ONE

var _prev_camera_h_offset: float = 0
var _prev_camera_v_offset: float = 0
var _prev_camera_fov: float = 75

var _active_pcam_2d_glob_transform: Transform2D = Transform2D()
var _active_pcam_3d_glob_transform: Transform3D = Transform3D()

#endregion


#region Private Functions

func _enter_tree() -> void:
#	camera = get_parent()
	var parent = get_parent()

	if parent is Camera2D or parent is Camera3D:
		_is_child_of_camera = true
		if parent is Camera2D:
			_is_2D = true
			camera_2d = parent
			# Force applies position smoothing to be disabled
			# This is to prevent overlap with the interpolation of the PCam2D.
			camera_2d.set_position_smoothing_enabled(false)
		else:
			_is_2D = false
			camera_3d = parent

		add_to_group(_constants.PCAM_HOST_GROUP_NAME)
#		var already_multi_hosts: bool = multiple_pcam_hosts

		_check_camera_host_amount()

		if _multiple_pcam_hosts:
			printerr(
				\"Only one PhantomCameraHost can exist in a scene\",
				\"\\n\",
				\"Multiple PhantomCameraHosts will be supported in https://github.com/MarcusSkov/phantom-camera/issues/26\"
			)
			queue_free()

		for pcam in _get_pcam_node_group():
			if not _multiple_pcam_hosts:
				pcam_added_to_scene(pcam)
				pcam.set_pcam_host_owner(self)
	else:
		printerr(name, \" is not a child of a Camera2D or Camera3D\")


func _exit_tree() -> void:
	remove_from_group(_constants.PCAM_HOST_GROUP_NAME)
	_check_camera_host_amount()


func _ready() -> void:
	if not is_instance_valid(_active_pcam): return
	if _is_2D:
		_active_pcam_2d_glob_transform = _active_pcam.get_global_transform()
	else:
		_active_pcam_3d_glob_transform = _active_pcam.get_global_transform()


func _check_camera_host_amount() -> void:
	if _get_pcam_host_group().size() > 1:
		_multiple_pcam_hosts = true
	else:
		_multiple_pcam_hosts = false


func _assign_new_active_pcam(pcam: Node) -> void:
	var no_previous_pcam: bool

	if _active_pcam:
		if _is_2D:
			_prev_active_pcam_2d_transform = camera_2d.get_global_transform()
			_active_pcam.queue_redraw()
		else:
			_prev_active_pcam_3d_transform = camera_3d.get_global_transform()
			_prev_camera_fov = camera_3d.get_fov()
			_prev_camera_h_offset = camera_3d.get_h_offset()
			_prev_camera_v_offset = camera_3d.get_v_offset()

		_active_pcam.set_is_active(self, false)
		_active_pcam.became_inactive.emit()

		if _trigger_pcam_tween:
			_active_pcam.tween_interrupted.emit(pcam)
	else:
		no_previous_pcam = true

	_active_pcam = pcam
	_active_pcam_priority = pcam.get_priority()
	_active_pcam_has_damping = pcam.follow_damping

	if _active_pcam.show_viewfinder_in_play:
		_viewfinder_needed_check = true

	_active_pcam.set_is_active(self, true)
	_active_pcam.became_active.emit()

	if _is_2D:
		_camera_zoom = camera_2d.get_zoom()
	else:
		if _active_pcam.get_camera_3d_resource():
			camera_3d.cull_mask = _active_pcam.get_cull_mask()

	if no_previous_pcam:
		if _is_2D:
			_prev_active_pcam_2d_transform = _active_pcam.get_global_transform()
		else:
			_prev_active_pcam_3d_transform = _active_pcam.get_global_transform()

	_tween_duration = 0

	if pcam.tween_on_load or not pcam.get_has_tweened():
		_trigger_pcam_tween = true


func _find_pcam_with_highest_priority() -> void:
	for pcam in _pcam_list:
		if pcam.get_priority() > _active_pcam_priority:
			_assign_new_active_pcam(pcam)

		pcam.set_has_tweened(self, false)

		_active_pcam_missing = false


func _pcam_tween(delta: float) -> void:
	# Run at the first tween frame
	if _tween_duration == 0:
		_active_pcam.tween_started.emit()

		if _is_2D:
			_active_pcam.reset_limit()

	_tween_duration += delta
	_active_pcam.is_tweening.emit()

	if _is_2D:
		var interpolation_destination: Vector2 = _tween_interpolate_value(_prev_active_pcam_2d_transform.origin, _active_pcam_2d_glob_transform.origin)

		if _active_pcam.snap_to_pixel:
			camera_2d.global_position = interpolation_destination.round()
		else:
			camera_2d.global_position = interpolation_destination

		camera_2d.rotation = _tween_interpolate_value(_prev_active_pcam_2d_transform.get_rotation(), _active_pcam_2d_glob_transform.get_rotation())
		camera_2d.zoom = _tween_interpolate_value(_camera_zoom, _active_pcam.zoom)
	else:
		camera_3d.global_position = \\
			_tween_interpolate_value(_prev_active_pcam_3d_transform.origin, _active_pcam_3d_glob_transform.origin)

		var prev_active_pcam_3d_quat: Quaternion = Quaternion(_prev_active_pcam_3d_transform.basis.orthonormalized())
		camera_3d.quaternion = \\
			Tween.interpolate_value(
				prev_active_pcam_3d_quat, \\
				prev_active_pcam_3d_quat.inverse() * Quaternion(_active_pcam_3d_glob_transform.basis.orthonormalized()),
				_tween_duration, \\
				_active_pcam.get_tween_duration(), \\
				_active_pcam.get_tween_transition(),
				_active_pcam.get_tween_ease(),
			)

		if _prev_camera_fov != _active_pcam.get_fov():
			camera_3d.set_fov(
				_tween_interpolate_value(_prev_camera_fov, _active_pcam.get_fov())
			)

		if _prev_camera_h_offset != _active_pcam.get_h_offset():
			camera_3d.set_h_offset(
				_tween_interpolate_value(_prev_camera_h_offset, _active_pcam.get_h_offset())
			)

		if _prev_camera_v_offset != _active_pcam.get_v_offset():
			camera_3d.set_v_offset(
				_tween_interpolate_value(_prev_camera_v_offset, _active_pcam.get_v_offset())
			)


func _tween_interpolate_value(from: Variant, to: Variant) -> Variant:
	return Tween.interpolate_value(
		from, \\
		to - from,
		_tween_duration, \\
		_active_pcam.get_tween_duration(), \\
		_active_pcam.get_tween_transition(),
		_active_pcam.get_tween_ease(),
	)


func _pcam_follow(delta: float) -> void:
	if not _active_pcam: return

	if _is_2D:
		if _active_pcam.snap_to_pixel:
			var snap_to_pixel_glob_transform := _active_pcam_2d_glob_transform
			snap_to_pixel_glob_transform.origin = snap_to_pixel_glob_transform.origin.round()
			camera_2d.global_transform = snap_to_pixel_glob_transform
		else:
			camera_2d.global_transform =_active_pcam_2d_glob_transform
		camera_2d.zoom = _active_pcam.zoom
	else:
		camera_3d.global_transform = _active_pcam_3d_glob_transform


func _process_pcam(delta: float) -> void:
	if _active_pcam_missing or not _is_child_of_camera: return
	# When following
	if not _trigger_pcam_tween:
		_pcam_follow(delta)

		if _viewfinder_needed_check:
			_show_viewfinder_in_play()
			_viewfinder_needed_check = false

		# TODO - Should be able to find a more efficient way
		if Engine.is_editor_hint():
			if not _is_2D:
				if _active_pcam.get_camera_3d_resource():
					camera_3d.cull_mask = _active_pcam.get_cull_mask()
					camera_3d.fov = _active_pcam.get_fov()
					camera_3d.h_offset =_active_pcam.get_h_offset()
					camera_3d.v_offset = _active_pcam.get_v_offset()

	# When tweening
	else:
		if _tween_duration + delta <= _active_pcam.get_tween_duration():
			_pcam_tween(delta)
		else: # First frame when tweening completes
			_tween_duration = 0
			_trigger_pcam_tween = false

			#_show_viewfinder_in_play() # NOTE - Likely not needed
			_pcam_follow(delta)
			_active_pcam.tween_completed.emit()

			if _is_2D:
				_active_pcam.update_limit_all_sides()

				if Engine.is_editor_hint():
					_active_pcam.queue_redraw()


func _get_pcam_node_group() -> Array[Node]:
	return get_tree().get_nodes_in_group(_constants.PCAM_GROUP_NAME)


func _get_pcam_host_group() -> Array[Node]:
	return get_tree().get_nodes_in_group(_constants.PCAM_HOST_GROUP_NAME)


func _process(delta):
	if not is_instance_valid(_active_pcam): return

	if _is_2D:
		_active_pcam_2d_glob_transform = _active_pcam.get_global_transform()
	else:
		_active_pcam_3d_glob_transform = _active_pcam.get_global_transform()

	_process_pcam(delta)

#endregion


#region Public Functions

func _show_viewfinder_in_play() -> void:
	if _active_pcam.show_viewfinder_in_play:
		if not Engine.is_editor_hint() && OS.has_feature(\"editor\"): # Only appears when running in the editor
			var canvas_layer: CanvasLayer = CanvasLayer.new()
			get_tree().get_root().get_child(0).add_child(canvas_layer)

			if not is_instance_valid(_viewfinder_node):
				var _viewfinder_scene := load(\"res://addons/phantom_camera/panel/viewfinder/viewfinder_panel.tscn\")
				_viewfinder_node = _viewfinder_scene.instantiate()
				canvas_layer.add_child(_viewfinder_node)
			else:
				_viewfinder_node.visible = true
				_viewfinder_node.update_dead_zone()
	else:
		if is_instance_valid(_viewfinder_node):
			_viewfinder_node.visible = false


## Called when a [param PhantomCamera] is added to the scene.[br]
## [b]Note:[/b] This can only be called internally from a
## [param PhantomCamera] node.
func pcam_added_to_scene(pcam: Node) -> void:
	if is_instance_of(pcam, PhantomCamera2D) or is_instance_of(pcam, PhantomCamera3D):
		_pcam_list.append(pcam)

		if not pcam.tween_on_load:
			pcam.set_has_tweened(self, true) # Skips its tween if it has the highest priority on load

		_find_pcam_with_highest_priority()

	else:
		printerr(\"This function should only be called from PhantomCamera scripts\")


## Called when a [param PhantomCamera] is removed from the scene.[br]
## [b]Note:[/b] This can only be called internally from a
## [param PhantomCamera] node.
func pcam_removed_from_scene(pcam: Node) -> void:
	if is_instance_of(pcam, PhantomCamera2D) or is_instance_of(pcam, PhantomCamera3D):
		_pcam_list.erase(pcam)
		if pcam == _active_pcam:
			_active_pcam_missing = true
			_active_pcam_priority = -1
			_find_pcam_with_highest_priority()
	else:
		printerr(\"This function should only be called from PhantomCamera scripts\")

## Triggers a recalculation to determine which PhantomCamera has the highest
## priority.
func pcam_priority_updated(pcam: Node) -> void:
	if Engine.is_editor_hint() and _active_pcam.priority_override: return

	if not is_instance_valid(pcam): return

	var current_pcam_priority: int = pcam.get_priority()

	if current_pcam_priority >= _active_pcam_priority and pcam != _active_pcam:
		_assign_new_active_pcam(pcam)
	elif pcam == _active_pcam:
		if current_pcam_priority <= _active_pcam_priority:
			_active_pcam_priority = current_pcam_priority
			_find_pcam_with_highest_priority()
		else:
			_active_pcam_priority = current_pcam_priority


## Updates the viewfinder when a [param PhantomCamera] has its
## [param priority_ovrride] enabled.[br]
## [b]Note:[/b] This only affects the editor.
func pcam_priority_override(pcam: Node) -> void:
	if Engine.is_editor_hint() and _active_pcam.priority_override:
		_active_pcam.priority_override = false

	_assign_new_active_pcam(pcam)
	update_editor_viewfinder.emit()


## Updates the viewfinder when a [param PhantomCamera] has its
## [param priority_ovrride] disabled.[br]
## [b]Note:[/b] This only affects the editor.
func pcam_priority_override_disabled() -> void:
	update_editor_viewfinder.emit()


## Returns the currently active [param PhantomCamera]
func get_active_pcam() -> Node:
	return _active_pcam

## Returns whether if a [param PhantomCamera] should tween when it becomes
## active. If it's already active, the value will always be false.
## [b]Note:[/b] This can only be called internally from a
## [param PhantomCamera] node.
func get_trigger_pcam_tween() -> bool:
	return _trigger_pcam_tween

#endregion
"

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_0n3kf"]
radius = 16.0
height = 48.0

[sub_resource type="Animation" id="Animation_gdeu0"]
length = 0.1
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite:visible")
tracks/0/interp = 1
tracks/0/loop_wrap = false
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [true]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Sprite:frame")
tracks/1/interp = 1
tracks/1/loop_wrap = false
tracks/1/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [0]
}

[sub_resource type="Animation" id="Animation_u0rdc"]
length = 0.1
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite:visible")
tracks/0/interp = 1
tracks/0/loop_wrap = false
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [true]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Sprite:frame")
tracks/1/interp = 1
tracks/1/loop_wrap = false
tracks/1/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [3]
}

[sub_resource type="Animation" id="Animation_mxlqg"]
length = 0.275
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Hitbox/CollisionShape2D:disabled")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [true, false]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Sprite:visible")
tracks/1/interp = 1
tracks/1/loop_wrap = false
tracks/1/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [true]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("Sprite:frame")
tracks/2/interp = 1
tracks/2/loop_wrap = false
tracks/2/keys = {
"times": PackedFloat32Array(0, 0.075, 0.175),
"transitions": PackedFloat32Array(1, 1, 1),
"update": 1,
"values": [6, 7, 8]
}

[sub_resource type="Animation" id="Animation_eqvl6"]
length = 0.3
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Hitbox/CollisionShape2D:disabled")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [true, false]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Sprite:visible")
tracks/1/interp = 1
tracks/1/loop_wrap = false
tracks/1/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [true]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("Sprite:frame")
tracks/2/interp = 1
tracks/2/loop_wrap = false
tracks/2/keys = {
"times": PackedFloat32Array(0, 0.1, 0.2),
"transitions": PackedFloat32Array(1, 1, 1),
"update": 1,
"values": [9, 10, 11]
}

[sub_resource type="Animation" id="Animation_oxrd0"]
length = 0.3
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite:visible")
tracks/0/interp = 1
tracks/0/loop_wrap = false
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [true]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Sprite:frame")
tracks/1/interp = 1
tracks/1/loop_wrap = false
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.1, 0.2),
"transitions": PackedFloat32Array(1, 1, 1),
"update": 1,
"values": [0, 1, 2]
}

[sub_resource type="Animation" id="Animation_yushi"]
length = 0.3
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite:visible")
tracks/0/interp = 1
tracks/0/loop_wrap = false
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [true]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Sprite:frame")
tracks/1/interp = 1
tracks/1/loop_wrap = false
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.1, 0.2),
"transitions": PackedFloat32Array(1, 1, 1),
"update": 1,
"values": [3, 4, 5]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_4p46q"]
_data = {
"idle_down": SubResource("Animation_gdeu0"),
"idle_up": SubResource("Animation_u0rdc"),
"roll_down": SubResource("Animation_mxlqg"),
"roll_up": SubResource("Animation_eqvl6"),
"walk_down": SubResource("Animation_oxrd0"),
"walk_up": SubResource("Animation_yushi")
}

[sub_resource type="GDScript" id="GDScript_4j7jq"]
script/source = "@icon(\"res://addons/phantom_camera/icons/phantom_camera_tween.svg\")
class_name PhantomCameraTween
extends Resource

## Tweening resource for [PhantomCamera2D] and [PhantomCamera3D].
##
## Defines how [param PhantomCameras] transition between one another.
## Changing the tween values for a given [param PhantomCamera] determines how
## transitioning to that instance will look like.

enum TransitionType {
	LINEAR 	= 0, ## The animation is interpolated linearly.
	SINE 	= 1, ## The animation is interpolated using a sine function.
	QUINT 	= 2, ## The animation is interpolated with a quintic (to the power of 5) function.
	QUART 	= 3, ## The animation is interpolated with a quartic (to the power of 4) function.
	QUAD 	= 4, ## The animation is interpolated with a quadratic (to the power of 2) function.
	EXPO 	= 5, ## The animation is interpolated with an exponential (to the power of x) function.
	ELASTIC = 6, ## The animation is interpolated with elasticity, wiggling around the edges.
	CUBIC 	= 7, ## The animation is interpolated with a cubic (to the power of 3) function.
	CIRC 	= 8, ## The animation is interpolated with a function using square roots.
	BOUNCE 	= 9, ## The animation is interpolated by bouncing at the end.
	BACK 	= 10, ## The animation is interpolated backing out at ends.
#	CUSTOM 	= 11,
#	NONE 	= 12,
}

enum EaseType {
	EASE_IN 	= 0, ## The interpolation starts slowly and speeds up towards the end.
	EASE_OUT 	= 1, ## The interpolation starts quickly and slows down towards the end.
	EASE_IN_OUT = 2, ## A combination of EASE_IN and EASE_OUT. The interpolation is slowest at both ends.
	EASE_OUT_IN = 3, ## A combination of EASE_IN and EASE_OUT. The interpolation is fastest at both ends.
}

## The time it takes to tween to this PhantomCamera in [param seconds].
@export var duration: float = 1

## The transition bezier type for the tween. The options are defined in the [enum TransitionType].
@export var transition: TransitionType = TransitionType.LINEAR

## The ease type for the tween. The options are defined in the [enum EaseType].
@export var ease: EaseType = EaseType.EASE_IN_OUT
"

[sub_resource type="Resource" id="Resource_qtjg3"]
script = SubResource("GDScript_4j7jq")
duration = 1.0
transition = 0
ease = 3

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_5tmpo"]
radius = 16.0
height = 64.0

[sub_resource type="CircleShape2D" id="CircleShape2D_3xweo"]
radius = 96.0

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_brdpf"]
radius = 24.0
height = 64.0

[node name="Player" type="CharacterBody2D" groups=["Player"]]
process_mode = 3
y_sort_enabled = true
collision_layer = 2
script = ExtResource("1_3iq6n")
DODGE_COOLDOWN = 0.7

[node name="Camera" type="Camera2D" parent="."]
position = Vector2(0, -50)
zoom = Vector2(1.2, 1.2)
position_smoothing_speed = 1.0
drag_left_margin = 0.3
drag_top_margin = 0.3
drag_right_margin = 0.3
drag_bottom_margin = 0.4
editor_draw_drag_margin = true

[node name="PhantomCameraHost" type="Node" parent="Camera"]
script = SubResource("GDScript_102o8")

[node name="Inventory" parent="." instance=ExtResource("2_urbfw")]
visible = false

[node name="Sprite" type="Sprite2D" parent="."]
texture_filter = 1
scale = Vector2(5, 5)
texture = ExtResource("1_34gvv")
hframes = 4
vframes = 3
metadata/_aseprite_wizard_config_ = {
"i_mode": -1,
"keep_anim_length": false,
"layer": "",
"o_ex_p": "",
"o_folder": "",
"o_name": "",
"only_visible": false,
"player": "AnimationPlayer",
"slice": "",
"source": "res://player/player.aseprite"
}
metadata/_aseprite_wizard_interface_config_ = {
"animation_section": false,
"layer_section": false,
"output_section": true
}

[node name="BodyShape" type="CollisionShape2D" parent="."]
position = Vector2(0, 8)
shape = SubResource("CapsuleShape2D_0n3kf")

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
libraries = {
"": SubResource("AnimationLibrary_4p46q")
}

[node name="PhantomCamera2D" type="Node2D" parent="."]
unique_name_in_owner = true
position = Vector2(0, -50)
script = ExtResource("2_ajiiy")
priority_override = false
priority = 0
zoom = Vector2(1.2, 1.2)
follow_mode = 5
follow_target = NodePath("..")
follow_parameters/target_offset = Vector2(0, -50)
follow_parameters/damping = true
follow_parameters/damping_value = 10.0
follow_parameters/dead_zone_horizontal = 1.0
follow_parameters/dead_zone_vertical = 1.0
follow_parameters/viewfinder_in_play = false
frame_preview = true
pixel_perfect = true
limit/draw_limits = true
limit/left = -10000000
limit/top = -10000000
limit/right = 10000000
limit/bottom = 10000000
limit/limit_node_target = NodePath("")
limit/smoothed = false
tween_parameters = SubResource("Resource_qtjg3")
tween_on_load = true
inactive_update_mode = 0

[node name="ItemCollect" type="Node2D" parent="."]

[node name="Collect" type="Area2D" parent="ItemCollect"]
collision_layer = 2
collision_mask = 0
monitoring = false

[node name="CollisionShape2D" type="CollisionShape2D" parent="ItemCollect/Collect"]
position = Vector2(0, 8)
shape = SubResource("CapsuleShape2D_5tmpo")

[node name="Trigger" type="Area2D" parent="ItemCollect"]
collision_layer = 4
collision_mask = 0
monitoring = false

[node name="CollisionShape2D" type="CollisionShape2D" parent="ItemCollect/Trigger"]
shape = SubResource("CircleShape2D_3xweo")

[node name="Hitbox" type="Area2D" parent="."]
collision_layer = 2
collision_mask = 0

[node name="CollisionShape2D" type="CollisionShape2D" parent="Hitbox"]
position = Vector2(0, 8)
shape = SubResource("CapsuleShape2D_brdpf")

[node name="Timers" type="Node" parent="."]

[node name="DodgeTimer" type="Timer" parent="Timers"]
one_shot = true

[node name="Weapon" type="Node2D" parent="."]

[node name="WeaponHandler" parent="Weapon" instance=ExtResource("7_cn85d")]
position = Vector2(40, 2.84217e-14)

[connection signal="animation_finished" from="AnimationPlayer" to="." method="_on_animation_finished"]
[connection signal="area_entered" from="ItemCollect/Collect" to="." method="_on_item_collect"]
